# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.firefox import GeckoDriverManager
from selenium.webdriver.firefox.options import Options


class TestStartasession():
    def setup_method(self, method):
        webdriverOptions = Options()
        webdriverOptions.set_preference("media.navigator.permission.disabled", True)
        webdriverOptions.set_preference("media.peerconnection.ice.relay_only", True)
        #webdriverOptions.headless = True
        self.driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()),options=webdriverOptions)
        self.vars = {}





    def teardown_method(self, method):
        pass
        #self.driver.quit()

    def test_startasession(self):
        self.driver.get("about:webrtc")
        self.driver.set_window_size(1911, 1158)
        # Services.prefs.getBoolPref("media.peerconnection.ice.relay_only")
        ice_relay_only_str = "media.peerconnection.ice.relay_only"
        permission_disabled_str = "media.navigator.permission.disabled"
        cmd = f'Services.prefs.getBoolPref("{ice_relay_only_str}");'
        cmd2 = f'Services.prefs.getBoolPref("{permission_disabled_str}");'
        re = self.driver.execute_script(cmd)
        re2 = self.driver.execute_script(cmd)
        print("Browser settings:")
        print(ice_relay_only_str,re,permission_disabled_str,re2)

        self.driver.get("https://thomsen-it.dk")


        WebDriverWait(self.driver, 30).until(
            expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, ".ip > .value")))
        WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located(
            (By.CSS_SELECTOR, ".country > .value")))
        self.vars["wanIp"] = self.driver.find_element(
            By.CSS_SELECTOR, ".ip > .value").text
        self.vars["country"] = self.driver.find_element(
            By.CSS_SELECTOR, ".country > .value").text
        self.vars["region"] = self.driver.find_element(
            By.CSS_SELECTOR, ".region > .value").text
        self.vars["city"] = self.driver.find_element(
            By.CSS_SELECTOR, ".city > .value").text
        self.driver.find_element(By.CSS_SELECTOR, ".username-input").click()
        self.vars["isp"] = self.driver.find_element(
            By.CSS_SELECTOR, ".isp > .value").text
        self.driver.find_element(By.CSS_SELECTOR, ".username-input").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".username-input").send_keys("username")
        self.driver.find_element(By.CSS_SELECTOR, ".room-input").click()
        self.driver.find_element(
            By.CSS_SELECTOR, ".room-input").send_keys("room")

        print("\n" + self.vars["wanIp"] + " " + self.vars["country"] + " " +
              self.vars["region"] + " " + self.vars["city"] + " " + self.vars["isp"])
        self.driver.find_element(By.ID, "start-call").click()



if __name__ == "__main__":
    t = TestStartasession()
    print("Before")
    t.setup_method(None)
    print("After")
    t.test_startasession()
    t.teardown_method(None)
